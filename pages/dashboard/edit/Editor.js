// Î¶¨Ïï°Ìä∏ÌÄºÏóêÎîîÌÑ∞REF Ïª§Ïä§ÌÖÄ > https://www.npmjs.com/package/react-quilljs?activeTab
// Î¶¨Ïï°Ìä∏Ïù¥ÎØ∏ÏßÄÎ¶¨ÏÇ¨Ïù¥Ï¶à ÏÇ¨Ïö© > https://www.npmjs.com/package/quill-image-resize-module-react


// Ï§ëÏöî: Ïª¥Ìè¨ÎÑåÌä∏Ïùò ÌÅ¥ÎûòÏä§ÎÑ§ÏûÑ(ql-insertHeart)Í≥º Ìï∏Îì§Îü¨Ïùò keyÏù¥Î¶Ñ(inserHeart)ÏôÄ ÏùºÏπòÌï¥ÏïºÌï®
import React, { useEffect, useState } from 'react';
import ImageResize from 'quill-image-resize-module-react';
// Ï§ëÏöî 1: Quill moudleÏóê Ïô∏Î∂Ä Î™®ÎìàÏùÑ Îì±Î°ùÌïòÍ∏∞ ÏúÑÌï¥ Quill ÏûÑÌè¨Ìä∏
import Quill from 'quill';

import { useQuill } from 'react-quilljs';
import 'quill/dist/quill.snow.css';
import { useDispatch } from "react-redux";
import { testAction } from "@/lib/store/modules/test";
import axios from 'axios';
import { useRouter } from "next/router";

// ÏóëÏÖÄ ÌååÏùº ÏóÖÎ°úÎìú ÏïÑÏù¥ÏΩò
const ExcelUploadIcon = () => ( <span className='excelUpload'>üìÉ</span> )
// Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÏóÖÎ°úÎìú ÏïÑÏù¥ÏΩò
const ImageUploadIcon = () => ( <span className='imageUpload'>üñºÔ∏è</span> )

// Ïù¥ÎØ∏ÏßÄ ctrl c / ctrl v
// quillRef ÎÅåÏñ¥Ïò¨Î¶¨Í∏∞
let _quillRef = null;
window.addEventListener("paste", function(e){
    let item = Array.from(e.clipboardData.items).find(x => /^image\//.test(x.type));
    // ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨Îêú ÌååÏùºÏù¥ imageÍ∞Ä ÏïÑÎãàÎ©¥, Î¶¨ÌÑ¥
    if (!item) {
        return;
    }

    let blob = item.getAsFile();

    let img = new Image();

    img.onload = function(){
        if(_quillRef) {
            // _quillRef.current.firstChild > ÏóêÎîîÌÑ∞Ï∞Ω ÌÉÄÍ≤üÏúºÎ°ú Ï∂úÎ†•
            _quillRef.current.firstChild.appendChild(this);
        }
    };

    img.src = URL.createObjectURL(blob);
});


const formats = [
    'bold', 'italic', 'underline', 'strike',
    'align', 'list', 'indent',
    'size', 'header',
    'link', 'image', 'video',
    'color', 'background',
    'clean', 'script',
    'blockquote', 'code-block'
];

const placeholder = 'Î≥∏Î¨∏ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.';

// Ï§ëÏöî 2: Quill moudleÏóê imageResize ÎîîÎ†âÌÑ∞Î¶¨ Îì±Î°ù
Quill.register("modules/imageResize", ImageResize);

const Editor = () => {
    // Î¶¨ÎçïÏä§
    const dispatch = useDispatch();

    const modules = {
        toolbar: {
            container: '#toolbar1',
            // handlers: {
            //     insertHeart: insertHeart
            // }
        },
        // Ï§ëÏöî 3: Î™®ÎìàÏóê Í∏∞Îä• Ìè¨Ìï®
        imageResize: {
            modules: [ 'Resize', 'DisplaySize' ]
        }
    }

    const [excelUploadClicked, setExcelUploadClicked] = useState(false);
    const [imageUploadClicked, setImageUploadClicked] = useState(false);
    const uploadHandler = (e) => {
        const className = e.target.className;
        if (className === "excelUpload") {
            setExcelUploadClicked(!excelUploadClicked);
        } else if (className === "imageUpload") {
            setImageUploadClicked(!imageUploadClicked);
        }

    }


    const { quill, quillRef } = useQuill({ modules, formats, placeholder });

    // ÏóëÏÖÄ ÌååÏùº > ÌôîÎ©¥Ïóê ÌëúÏãúÌï† Ïπ¥Îìú
    const [ excelUploadCard, setExcelUploadCard ] = useState(null);
    // ÏóëÏÖÄÌååÏùºÏù∏ÏßÄ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    useEffect(() => {
        if (quill) {
            const input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', '.xlsx');
            input.click();

            input.onchange = () => {
                const file = input.files[0];
                let extention = file.name.slice(file.name.indexOf(".") + 1).toLowerCase();
                if(extention !== "xlsx") {
                  alert(`[ ${file.name} ] ÏùÄ ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùºÌòïÏãùÏûÖÎãàÎã§.`);
                  return;
                }
                setExcelUploadCard(file);
                // axios ÏÇ¨Ïö©Ìï¥ÏïºÌï®
            };
        }
    }, [excelUploadClicked]);

    // Ïù¥ÎØ∏ÏßÄ ÌååÏùº > ÌôîÎ©¥Ïóê ÌëúÏãúÌï† Ïπ¥Îìú
    const [ imageUploadCard, setImageUploadCard ] = useState(null);
    // Ïù¥ÎØ∏ÏßÄÌååÏùºÏù∏ÏßÄ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    useEffect(() => {
        if (quill) {
            const input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', 'image/*');
            input.click();

            input.onchange = () => {
                const file = input.files[0];
                let extention = file.name.slice(file.name.indexOf(".") + 1).toLowerCase();
                if(extention !== "png") {
                  alert(`[ ${file.name} ] ÏùÄ ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùºÌòïÏãùÏûÖÎãàÎã§.`);
                  return;
                }
                // else if(extention !== "jpg") {
                //     alert(`[ ${file.name} ] ÏùÄ ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùºÌòïÏãùÏûÖÎãàÎã§.`);
                //     return;
                // }
                setImageUploadCard(file);
                // axios ÏÇ¨Ïö©Ìï¥ÏïºÌï®
            };
        }
    }, [imageUploadClicked]);

    // Insert Image(selected by user) to quill
    const insertToEditor = (url) => {
        const range = quill.getSelection();
        quill.insertEmbed(range.index, 'image', url);
    };

    // Upload Image to Image Server such as AWS S3, Cloudinary, Cloud Storage, etc..
    const saveToServer = async (file) => {
        const body = new FormData();
        body.append('file', file);
        const config = {
            headers: { 'content-type': 'multipart/form-data' },
          };

        const response = await axios.post('/api/imgupload', body, config);
        // ‚òÖÏ§ëÏöî: next.js ÏóêÏÑúÎäî public Í≤ΩÎ°úÎ•º Ï†úÏô∏ÌïòÍ≥† Ï†ÅÏñ¥Ï£ºÎ©¥ Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ïù¥ÎØ∏ÏßÄÍ∞Ä Ï∂úÎ†•Îê®
        const url = "/uploads/" + response?.data[0].filename
        insertToEditor(url)
    };

    // Open Dialog to select Image File
    const selectLocalImage = () => {
        const input = document.createElement('input');
        input.setAttribute('type', 'file');
        input.setAttribute('accept', 'image/*');
        input.click();

        input.onchange = () => {
        const file = input.files[0];
        saveToServer(file);
        };
    };

    const router = useRouter();
    const { id } = router.query;
    const [isIDChnaged, setIsIDChanged] = useState(id);
    const [fromDBhtmlText, setFromDBhtmlText] = useState("")

    useEffect(() => {
        console.log("Ïù¥Í≤å ÎßéÏù¥Îú®Î©¥ ÏïàÎê®")
        if (quill) {
            _quillRef = quillRef;

        // Add custom handler for Image Upload
        quill.getModule('toolbar').addHandler('image', selectLocalImage);

        // Í∏ÄÏûêÍ∞Ä Î∞îÎÄåÏóàÏùÑ Îïå, ÏΩúÏù¥ÎêòÎäî Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
        quill.on('text-change', (delta, oldDelta, source) => {
            // console.log(quill.getText()); // get text only
            // console.log(quill.getContents()); // get delta contents
            // console.log(quill.root.innerHTML); // get innerHTML using quill
            // console.log(quillRef.current.firstChild.innerHTML); // get innerHTML using quillRef
            dispatch(testAction(quillRef.current.firstChild.innerHTML));
        });

            // ÏóêÎîîÌÑ∞Ïóê fromDBhtmlText Ïò¨Î¶¨Í∏∞
            quill.clipboard.dangerouslyPasteHTML(fromDBhtmlText)
            console.log(`Í≤åÏãúÌåê ÏÉÅÌÉúÍ∞í: ${fromDBhtmlText}`)
        } else {
            console.log("quill ÏóÜÏùå")
        }
    }, [quill, id, fromDBhtmlText]);

    useEffect(()=> {
        setIsIDChanged(id);
        console.log("Ïù¥Í≤å ÎßéÏù¥Îú®Î©¥ ÏïàÎê®")

        // DBÏùò Í≥†Ïú† idÎ•º
        axios.post("/api/post/getEditData", {
                "id": id,
            }, {
            "Content-Type": "application/json"
            }).then(res => {
                let data = res.data[0];
                console.log(`Î∂àÎü¨Ïò® htmlÍ∞í: ${data.htmlText}`)
                setFromDBhtmlText(data.htmlText);
           })
    }, [])


    return (
        <div className='DKEditorRef' style={{ width: 800 }}>
            <div id="toolbar1">
                <select className="ql-size">
                    <option value="small" />
                    <option defaultValue />
                    <option value="large" />
                    <option value="huge" />
                </select>
                <select className="ql-header">
                    <option value="1" />
                    <option value="2" />
                    <option value="3" />
                    <option value="4" />
                    <option value="5" />
                    <option value="6" />
                </select>
                <select className='ql-color'></select>
                <select className='ql-background'></select>
                <button className="ql-bold" />
                <button className="ql-italic" />
                <button className="ql-underline" />
                <button className="ql-strike" />
                <button className='ql-image'></button>
                <select className="ql-align"></select>
                <button className="ql-list" value="bullet"/>
                <button className="ql-list" value="ordered"/>
                <button className="ql-indent" value="-1"></button>
                <button className="ql-indent" value="+1"></button>
                <button className="ql-blockquote"/>
                <button className='ql-link'></button>
                <button className='ql-clean'></button>
                <button className="ql-script" value="sub" />
                <button className="ql-script" value="super" />
            </div>
            <div ref={quillRef}></div>
            {/* <div ref={counterRef}></div> */}
            {/* ÏïÑÎûò html ÌÉúÍ∑∏ ÌÖçÏä§Ìä∏ ÏΩîÎìúÎ•º htmlÎ°ú Î≥ÄÍ≤Ω */}
            {/* <div dangerouslySetInnerHTML={{ __html: data }} ></div> */}
            {
                excelUploadCard &&
                    <div
                        style={{ width: "100%", display: "flex", justifyContent: "space-between", backgroundColor: "grey" }}>
                        <span>{excelUploadCard.name}</span>
                        <div style={{ width: "20px", cursor: "pointer", color: "red", textAlign: "center"}}
                            onClick={()=> { setExcelUploadCard(null) }}
                        >x</div>
                    </div>
            }
            {
                imageUploadCard &&
                    <div
                        style={{ width: "100%", display: "flex", justifyContent: "space-between", backgroundColor: "grey" }}>
                        <span>{imageUploadCard.name}</span>
                        <div style={{ width: "20px", cursor: "pointer", color: "red", textAlign: "center"}}
                            onClick={()=> { setImageUploadCard(null) }}
                        >x</div>
                    </div>
            }
        </div>
    );
}

export default Editor;